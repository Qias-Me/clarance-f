{
	"files.associations": {
		"wrangler.json": "jsonc"
	},
	"workbench.externalBrowser": "chrome",
	"augment.chat.userGuidelines": "# Optimized Agent Workflow for Task Execution\n\n## 1. Initial Planning Phase\n\n### 1.1 Sequential Thinking MCP\n- **Purpose**: Systematically analyze and plan the task execution\n- **Process**:\n  - Break down the problem into logical components\n  - Consider potential challenges and edge cases\n  - Develop a step-by-step execution plan\n  - Validate the approach before proceeding\n- **Key Principles**:\n  - Never make assumptions without verification\n  - Prioritize error prevention through thorough planning\n  - Consider multiple approaches before selecting the most reliable one\n  - Document the reasoning behind each decision\n\n## 2. Task Management Phase\n\n### 2.1 Task Manager MCP\n- **Purpose**: Structured breakdown and tracking of tasks\n- **Implementation**:\n  - Decompose main task into clear, actionable subtasks\n  - Define success criteria for each subtask\n  - Establish dependencies between tasks\n  - Set priorities and estimate time requirements\n  - Track progress and update task status\n- **Best Practices**:\n  - Make tasks specific, measurable, and time-bound\n  - Include validation steps for each task\n  - Maintain clear documentation of task status\n  - Handle errors and exceptions gracefully\n\n## 3. Available MCP Servers & Their Usage\n\n### 3.1 Context7 MCP\n- **Primary Function**: Library documentation and usage\n- **Capabilities**:\n  - Search for libraries by name\n  - Retrieve comprehensive documentation\n  - Access version-specific information\n  - Get code examples and usage patterns\n- **Usage Guidelines**:\n  - Always verify library compatibility\n  - Check for version-specific requirements\n  - Review examples before implementation\n  - Note any deprecated features or breaking changes\n\n## 3. Error Handling & Validation\n\n### 3.1 Error Prevention\n- Always verify information from multiple sources\n- Implement input validation for all operations\n- Use defensive programming techniques\n- Maintain comprehensive logging\n\n### 3.2 Recovery Procedures\n- Document common failure scenarios\n- Implement graceful fallbacks\n- Maintain clear error messages\n- Establish rollback procedures\n\n## 4. Best Practices\n\n### 4.1 Code Quality\n- Follow consistent coding standards\n- Write self-documenting code\n- Include meaningful comments\n- Implement proper error handling\n\n### 4.2 Documentation\n- Document all assumptions\n- Record all decisions made\n- Maintain change logs\n- Update documentation with changes\n\n### 4.3 Performance\n- Optimize for efficiency\n- Monitor resource usage\n- Implement caching where appropriate\n- Profile and optimize critical paths\n\nDO NOT MAKE TESTS UNLESS I ASK YOU TO DO SO BECAUSE YOU ARE\nWASTING MY TIME AND MONEY.\n\nREMEMBER MAKE AS MANY CHANGES YOU CAN AT A TIME \nBECAUSE YOU COST ME PER MESSAGE I SEND YOU\nSO IN EACH MESSAGE YOU SHALL DO AS MUCH AS POSSIBLE.\n\nOK FOLLOW THE ABOVE AND WHAT I WANT YOU TO DO IS BELOW:",
	"javascript.updateImportsOnFileMove.enabled": "always",
	"typescript.updateImportsOnFileMove.enabled": "always",
}